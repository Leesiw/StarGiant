// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pp.proto

#include "pp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Level_MonsterStatus_pp_2eproto;
class Level_MonsterStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Level_MonsterStatus> _instance;
} _Level_MonsterStatus_default_instance_;
class LevelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Level> _instance;
} _Level_default_instance_;
static void InitDefaultsscc_info_Level_pp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Level_default_instance_;
    new (ptr) ::Level();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Level::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Level_pp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Level_pp_2eproto}, {
      &scc_info_Level_MonsterStatus_pp_2eproto.base,}};

static void InitDefaultsscc_info_Level_MonsterStatus_pp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Level_MonsterStatus_default_instance_;
    new (ptr) ::Level_MonsterStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Level_MonsterStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Level_MonsterStatus_pp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Level_MonsterStatus_pp_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pp_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pp_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pp_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Level_MonsterStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Level_MonsterStatus, max_hp_),
  PROTOBUF_FIELD_OFFSET(::Level_MonsterStatus, atk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Level, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Level, nextmission_),
  PROTOBUF_FIELD_OFFSET(::Level, plasmacannon_),
  PROTOBUF_FIELD_OFFSET(::Level, missile_),
  PROTOBUF_FIELD_OFFSET(::Level, laser_),
  PROTOBUF_FIELD_OFFSET(::Level, maxmonsternum_),
  PROTOBUF_FIELD_OFFSET(::Level, spawnmonsternum_),
  PROTOBUF_FIELD_OFFSET(::Level, requirement_),
  PROTOBUF_FIELD_OFFSET(::Level, restartmission_),
  PROTOBUF_FIELD_OFFSET(::Level, restartposition_x_),
  PROTOBUF_FIELD_OFFSET(::Level, restartposition_y_),
  PROTOBUF_FIELD_OFFSET(::Level, restartposition_z_),
  PROTOBUF_FIELD_OFFSET(::Level, killmonsternum_),
  PROTOBUF_FIELD_OFFSET(::Level, destination_x_),
  PROTOBUF_FIELD_OFFSET(::Level, destination_y_),
  PROTOBUF_FIELD_OFFSET(::Level, destination_z_),
  PROTOBUF_FIELD_OFFSET(::Level, dist_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Level_MonsterStatus)},
  { 7, -1, sizeof(::Level)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Level_MonsterStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Level_default_instance_),
};

const char descriptor_table_protodef_pp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010pp.proto\"\374\005\n\005Level\022\023\n\013NextMission\030\001 \001("
  "\005\022*\n\014PlasmaCannon\030\002 \001(\0132\024.Level.MonsterS"
  "tatus\022%\n\007Missile\030\003 \001(\0132\024.Level.MonsterSt"
  "atus\022#\n\005Laser\030\004 \001(\0132\024.Level.MonsterStatu"
  "s\022\025\n\rMaxMonsterNum\030\005 \001(\005\022\027\n\017SpawnMonster"
  "Num\030\006 \001(\005\022\'\n\013Requirement\030\007 \001(\0162\022.Level.M"
  "issionType\022\026\n\016RestartMission\030\010 \001(\005\022\031\n\021Re"
  "startPosition_x\030\t \001(\002\022\031\n\021RestartPosition"
  "_y\030\n \001(\002\022\031\n\021RestartPosition_z\030\013 \001(\002\022\026\n\016K"
  "illMonsterNum\030\014 \001(\005\022\025\n\rDestination_x\030\r \001"
  "(\002\022\025\n\rDestination_y\030\016 \001(\002\022\025\n\rDestination"
  "_z\030\017 \001(\002\022\014\n\004Dist\030\020 \001(\002\032,\n\rMonsterStatus\022"
  "\016\n\006MAX_HP\030\001 \001(\005\022\013\n\003ATK\030\002 \001(\005\"\212\002\n\013Mission"
  "Type\022\014\n\010CUTSCENE\020\000\022\022\n\016DEFEAT_MONSTER\020\001\022\021"
  "\n\rDEFEAT_METEOR\020\002\022\025\n\021GO_TO_DESTINATION\020\003"
  "\022\n\n\006TU_SIT\020\004\022\013\n\007TU_HEAL\020\005\022\016\n\nGET_JEWELS\020"
  "\006\022\017\n\013DEFEAT_BOSS\020\007\022\020\n\014DEFEAT_BOSS2\020\010\022\r\n\t"
  "GO_CENTER\020\t\022\025\n\021ESCAPE_BLACK_HOLE\020\n\022\014\n\010KI"
  "LL_GOD\020\013\022\r\n\tKILL_GOD2\020\014\022\r\n\tCS_ENDING\020\r\022\021"
  "\n\rCS_BAD_ENDING\020\016b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pp_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pp_2eproto_sccs[2] = {
  &scc_info_Level_pp_2eproto.base,
  &scc_info_Level_MonsterStatus_pp_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pp_2eproto_once;
static bool descriptor_table_pp_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pp_2eproto = {
  &descriptor_table_pp_2eproto_initialized, descriptor_table_protodef_pp_2eproto, "pp.proto", 785,
  &descriptor_table_pp_2eproto_once, descriptor_table_pp_2eproto_sccs, descriptor_table_pp_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_pp_2eproto::offsets,
  file_level_metadata_pp_2eproto, 2, file_level_enum_descriptors_pp_2eproto, file_level_service_descriptors_pp_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pp_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pp_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Level_MissionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pp_2eproto);
  return file_level_enum_descriptors_pp_2eproto[0];
}
bool Level_MissionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Level_MissionType Level::CUTSCENE;
constexpr Level_MissionType Level::DEFEAT_MONSTER;
constexpr Level_MissionType Level::DEFEAT_METEOR;
constexpr Level_MissionType Level::GO_TO_DESTINATION;
constexpr Level_MissionType Level::TU_SIT;
constexpr Level_MissionType Level::TU_HEAL;
constexpr Level_MissionType Level::GET_JEWELS;
constexpr Level_MissionType Level::DEFEAT_BOSS;
constexpr Level_MissionType Level::DEFEAT_BOSS2;
constexpr Level_MissionType Level::GO_CENTER;
constexpr Level_MissionType Level::ESCAPE_BLACK_HOLE;
constexpr Level_MissionType Level::KILL_GOD;
constexpr Level_MissionType Level::KILL_GOD2;
constexpr Level_MissionType Level::CS_ENDING;
constexpr Level_MissionType Level::CS_BAD_ENDING;
constexpr Level_MissionType Level::MissionType_MIN;
constexpr Level_MissionType Level::MissionType_MAX;
constexpr int Level::MissionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Level_MonsterStatus::InitAsDefaultInstance() {
}
class Level_MonsterStatus::_Internal {
 public:
};

Level_MonsterStatus::Level_MonsterStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Level.MonsterStatus)
}
Level_MonsterStatus::Level_MonsterStatus(const Level_MonsterStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_hp_, &from.max_hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&atk_) -
    reinterpret_cast<char*>(&max_hp_)) + sizeof(atk_));
  // @@protoc_insertion_point(copy_constructor:Level.MonsterStatus)
}

void Level_MonsterStatus::SharedCtor() {
  ::memset(&max_hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atk_) -
      reinterpret_cast<char*>(&max_hp_)) + sizeof(atk_));
}

Level_MonsterStatus::~Level_MonsterStatus() {
  // @@protoc_insertion_point(destructor:Level.MonsterStatus)
  SharedDtor();
}

void Level_MonsterStatus::SharedDtor() {
}

void Level_MonsterStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Level_MonsterStatus& Level_MonsterStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Level_MonsterStatus_pp_2eproto.base);
  return *internal_default_instance();
}


void Level_MonsterStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:Level.MonsterStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atk_) -
      reinterpret_cast<char*>(&max_hp_)) + sizeof(atk_));
  _internal_metadata_.Clear();
}

const char* Level_MonsterStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 MAX_HP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ATK = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          atk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Level_MonsterStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Level.MonsterStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 MAX_HP = 1;
  if (this->max_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_hp(), target);
  }

  // int32 ATK = 2;
  if (this->atk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_atk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Level.MonsterStatus)
  return target;
}

size_t Level_MonsterStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Level.MonsterStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 MAX_HP = 1;
  if (this->max_hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_hp());
  }

  // int32 ATK = 2;
  if (this->atk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_atk());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Level_MonsterStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Level.MonsterStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const Level_MonsterStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Level_MonsterStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Level.MonsterStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Level.MonsterStatus)
    MergeFrom(*source);
  }
}

void Level_MonsterStatus::MergeFrom(const Level_MonsterStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Level.MonsterStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_hp() != 0) {
    _internal_set_max_hp(from._internal_max_hp());
  }
  if (from.atk() != 0) {
    _internal_set_atk(from._internal_atk());
  }
}

void Level_MonsterStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Level.MonsterStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Level_MonsterStatus::CopyFrom(const Level_MonsterStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Level.MonsterStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Level_MonsterStatus::IsInitialized() const {
  return true;
}

void Level_MonsterStatus::InternalSwap(Level_MonsterStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_hp_, other->max_hp_);
  swap(atk_, other->atk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Level_MonsterStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Level::InitAsDefaultInstance() {
  ::_Level_default_instance_._instance.get_mutable()->plasmacannon_ = const_cast< ::Level_MonsterStatus*>(
      ::Level_MonsterStatus::internal_default_instance());
  ::_Level_default_instance_._instance.get_mutable()->missile_ = const_cast< ::Level_MonsterStatus*>(
      ::Level_MonsterStatus::internal_default_instance());
  ::_Level_default_instance_._instance.get_mutable()->laser_ = const_cast< ::Level_MonsterStatus*>(
      ::Level_MonsterStatus::internal_default_instance());
}
class Level::_Internal {
 public:
  static const ::Level_MonsterStatus& plasmacannon(const Level* msg);
  static const ::Level_MonsterStatus& missile(const Level* msg);
  static const ::Level_MonsterStatus& laser(const Level* msg);
};

const ::Level_MonsterStatus&
Level::_Internal::plasmacannon(const Level* msg) {
  return *msg->plasmacannon_;
}
const ::Level_MonsterStatus&
Level::_Internal::missile(const Level* msg) {
  return *msg->missile_;
}
const ::Level_MonsterStatus&
Level::_Internal::laser(const Level* msg) {
  return *msg->laser_;
}
Level::Level()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Level)
}
Level::Level(const Level& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_plasmacannon()) {
    plasmacannon_ = new ::Level_MonsterStatus(*from.plasmacannon_);
  } else {
    plasmacannon_ = nullptr;
  }
  if (from._internal_has_missile()) {
    missile_ = new ::Level_MonsterStatus(*from.missile_);
  } else {
    missile_ = nullptr;
  }
  if (from._internal_has_laser()) {
    laser_ = new ::Level_MonsterStatus(*from.laser_);
  } else {
    laser_ = nullptr;
  }
  ::memcpy(&nextmission_, &from.nextmission_,
    static_cast<size_t>(reinterpret_cast<char*>(&dist_) -
    reinterpret_cast<char*>(&nextmission_)) + sizeof(dist_));
  // @@protoc_insertion_point(copy_constructor:Level)
}

void Level::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Level_pp_2eproto.base);
  ::memset(&plasmacannon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dist_) -
      reinterpret_cast<char*>(&plasmacannon_)) + sizeof(dist_));
}

Level::~Level() {
  // @@protoc_insertion_point(destructor:Level)
  SharedDtor();
}

void Level::SharedDtor() {
  if (this != internal_default_instance()) delete plasmacannon_;
  if (this != internal_default_instance()) delete missile_;
  if (this != internal_default_instance()) delete laser_;
}

void Level::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Level& Level::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Level_pp_2eproto.base);
  return *internal_default_instance();
}


void Level::Clear() {
// @@protoc_insertion_point(message_clear_start:Level)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && plasmacannon_ != nullptr) {
    delete plasmacannon_;
  }
  plasmacannon_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && missile_ != nullptr) {
    delete missile_;
  }
  missile_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && laser_ != nullptr) {
    delete laser_;
  }
  laser_ = nullptr;
  ::memset(&nextmission_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dist_) -
      reinterpret_cast<char*>(&nextmission_)) + sizeof(dist_));
  _internal_metadata_.Clear();
}

const char* Level::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 NextMission = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nextmission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Level.MonsterStatus PlasmaCannon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_plasmacannon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Level.MonsterStatus Missile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_missile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Level.MonsterStatus Laser = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_laser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MaxMonsterNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          maxmonsternum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 SpawnMonsterNum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          spawnmonsternum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Level.MissionType Requirement = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_requirement(static_cast<::Level_MissionType>(val));
        } else goto handle_unusual;
        continue;
      // int32 RestartMission = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          restartmission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float RestartPosition_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          restartposition_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float RestartPosition_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          restartposition_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float RestartPosition_z = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          restartposition_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 KillMonsterNum = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          killmonsternum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float Destination_x = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          destination_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Destination_y = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          destination_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Destination_z = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          destination_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Dist = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Level::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Level)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 NextMission = 1;
  if (this->nextmission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nextmission(), target);
  }

  // .Level.MonsterStatus PlasmaCannon = 2;
  if (this->has_plasmacannon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::plasmacannon(this), target, stream);
  }

  // .Level.MonsterStatus Missile = 3;
  if (this->has_missile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::missile(this), target, stream);
  }

  // .Level.MonsterStatus Laser = 4;
  if (this->has_laser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::laser(this), target, stream);
  }

  // int32 MaxMonsterNum = 5;
  if (this->maxmonsternum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_maxmonsternum(), target);
  }

  // int32 SpawnMonsterNum = 6;
  if (this->spawnmonsternum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_spawnmonsternum(), target);
  }

  // .Level.MissionType Requirement = 7;
  if (this->requirement() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_requirement(), target);
  }

  // int32 RestartMission = 8;
  if (this->restartmission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_restartmission(), target);
  }

  // float RestartPosition_x = 9;
  if (!(this->restartposition_x() <= 0 && this->restartposition_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_restartposition_x(), target);
  }

  // float RestartPosition_y = 10;
  if (!(this->restartposition_y() <= 0 && this->restartposition_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_restartposition_y(), target);
  }

  // float RestartPosition_z = 11;
  if (!(this->restartposition_z() <= 0 && this->restartposition_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_restartposition_z(), target);
  }

  // int32 KillMonsterNum = 12;
  if (this->killmonsternum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_killmonsternum(), target);
  }

  // float Destination_x = 13;
  if (!(this->destination_x() <= 0 && this->destination_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_destination_x(), target);
  }

  // float Destination_y = 14;
  if (!(this->destination_y() <= 0 && this->destination_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_destination_y(), target);
  }

  // float Destination_z = 15;
  if (!(this->destination_z() <= 0 && this->destination_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_destination_z(), target);
  }

  // float Dist = 16;
  if (!(this->dist() <= 0 && this->dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_dist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Level)
  return target;
}

size_t Level::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Level)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Level.MonsterStatus PlasmaCannon = 2;
  if (this->has_plasmacannon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plasmacannon_);
  }

  // .Level.MonsterStatus Missile = 3;
  if (this->has_missile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *missile_);
  }

  // .Level.MonsterStatus Laser = 4;
  if (this->has_laser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *laser_);
  }

  // int32 NextMission = 1;
  if (this->nextmission() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nextmission());
  }

  // int32 MaxMonsterNum = 5;
  if (this->maxmonsternum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxmonsternum());
  }

  // int32 SpawnMonsterNum = 6;
  if (this->spawnmonsternum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_spawnmonsternum());
  }

  // .Level.MissionType Requirement = 7;
  if (this->requirement() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requirement());
  }

  // int32 RestartMission = 8;
  if (this->restartmission() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_restartmission());
  }

  // float RestartPosition_x = 9;
  if (!(this->restartposition_x() <= 0 && this->restartposition_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float RestartPosition_y = 10;
  if (!(this->restartposition_y() <= 0 && this->restartposition_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float RestartPosition_z = 11;
  if (!(this->restartposition_z() <= 0 && this->restartposition_z() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 KillMonsterNum = 12;
  if (this->killmonsternum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_killmonsternum());
  }

  // float Destination_x = 13;
  if (!(this->destination_x() <= 0 && this->destination_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float Destination_y = 14;
  if (!(this->destination_y() <= 0 && this->destination_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float Destination_z = 15;
  if (!(this->destination_z() <= 0 && this->destination_z() >= 0)) {
    total_size += 1 + 4;
  }

  // float Dist = 16;
  if (!(this->dist() <= 0 && this->dist() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Level::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Level)
  GOOGLE_DCHECK_NE(&from, this);
  const Level* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Level>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Level)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Level)
    MergeFrom(*source);
  }
}

void Level::MergeFrom(const Level& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Level)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_plasmacannon()) {
    _internal_mutable_plasmacannon()->::Level_MonsterStatus::MergeFrom(from._internal_plasmacannon());
  }
  if (from.has_missile()) {
    _internal_mutable_missile()->::Level_MonsterStatus::MergeFrom(from._internal_missile());
  }
  if (from.has_laser()) {
    _internal_mutable_laser()->::Level_MonsterStatus::MergeFrom(from._internal_laser());
  }
  if (from.nextmission() != 0) {
    _internal_set_nextmission(from._internal_nextmission());
  }
  if (from.maxmonsternum() != 0) {
    _internal_set_maxmonsternum(from._internal_maxmonsternum());
  }
  if (from.spawnmonsternum() != 0) {
    _internal_set_spawnmonsternum(from._internal_spawnmonsternum());
  }
  if (from.requirement() != 0) {
    _internal_set_requirement(from._internal_requirement());
  }
  if (from.restartmission() != 0) {
    _internal_set_restartmission(from._internal_restartmission());
  }
  if (!(from.restartposition_x() <= 0 && from.restartposition_x() >= 0)) {
    _internal_set_restartposition_x(from._internal_restartposition_x());
  }
  if (!(from.restartposition_y() <= 0 && from.restartposition_y() >= 0)) {
    _internal_set_restartposition_y(from._internal_restartposition_y());
  }
  if (!(from.restartposition_z() <= 0 && from.restartposition_z() >= 0)) {
    _internal_set_restartposition_z(from._internal_restartposition_z());
  }
  if (from.killmonsternum() != 0) {
    _internal_set_killmonsternum(from._internal_killmonsternum());
  }
  if (!(from.destination_x() <= 0 && from.destination_x() >= 0)) {
    _internal_set_destination_x(from._internal_destination_x());
  }
  if (!(from.destination_y() <= 0 && from.destination_y() >= 0)) {
    _internal_set_destination_y(from._internal_destination_y());
  }
  if (!(from.destination_z() <= 0 && from.destination_z() >= 0)) {
    _internal_set_destination_z(from._internal_destination_z());
  }
  if (!(from.dist() <= 0 && from.dist() >= 0)) {
    _internal_set_dist(from._internal_dist());
  }
}

void Level::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Level)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Level::CopyFrom(const Level& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Level)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Level::IsInitialized() const {
  return true;
}

void Level::InternalSwap(Level* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(plasmacannon_, other->plasmacannon_);
  swap(missile_, other->missile_);
  swap(laser_, other->laser_);
  swap(nextmission_, other->nextmission_);
  swap(maxmonsternum_, other->maxmonsternum_);
  swap(spawnmonsternum_, other->spawnmonsternum_);
  swap(requirement_, other->requirement_);
  swap(restartmission_, other->restartmission_);
  swap(restartposition_x_, other->restartposition_x_);
  swap(restartposition_y_, other->restartposition_y_);
  swap(restartposition_z_, other->restartposition_z_);
  swap(killmonsternum_, other->killmonsternum_);
  swap(destination_x_, other->destination_x_);
  swap(destination_y_, other->destination_y_);
  swap(destination_z_, other->destination_z_);
  swap(dist_, other->dist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Level::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Level_MonsterStatus* Arena::CreateMaybeMessage< ::Level_MonsterStatus >(Arena* arena) {
  return Arena::CreateInternal< ::Level_MonsterStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::Level* Arena::CreateMaybeMessage< ::Level >(Arena* arena) {
  return Arena::CreateInternal< ::Level >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

이름               학번              email주소
이시우	2020182033		asonaso@tukorea.ac.kr   (서버프로그래밍)
최유진 	2020180041 	luna8297@naver.com     (클라이언트프로그래밍)
정하나        2020182038         hana0302@tukorea.ac.kr  (클라이언트프로그래밍)


2022-05-13
-------------
1. DirectX12를 사용

2. 아직 정해지지는 않았는데, 일단은 FPS를 생각하고 있다.
 - 배경은 생각해 보지 않았다.

3. 클라이언트 서버가 있는 멀티플레이어 게임.

4. 수강
 - 이용희 교수님의 3D 게임 프로그래밍을 듣고 있다.
 -네트워크 기초도 듣고 있다.
 - 다음학기 : 넷겜플, 3D 게임 프로그래밍-2 수강 예정

5. ToDo
 - 팀이름 정하기
 - 어떤 게임을 만들것인가 계속 고민하기
  * 장르, 배경, 게임플레이 (플레이의 목적, 게임 승리 방법, 플레이 지형/환경,....)
 - 수업 잘 듣기
 - 여름방학부터 DirectX12로 간단한 것들 제작하기
  * 화면에 네모그리기, 커서키로 네모 이동시키기, 땅/SkyBox 그리기,  마우스로 카메라 방향 이동
 - 다음미팅
  * 6월 10일 금요일 오후 7시 : 방학동안 무엇을 할것인가 계획

2022-06-10
-------------
1;. 진행상황
 - 팀이름 : 고민중
 - 게임 장르 : 우주 베경, 우주선을 탄 3명이 공격, 수리, 조종, 
     우주 전투 선박 시뮬레이션

2. 다음미팅
 - 6월 28일 화요일 오후 2시 30분
 - 팀이름 정하고, 어떤 게임만들지 상의해 오기

2022-06-28
-------------
1. 팀이름 : 별거인

2. 게임 내용
 - Lovers in dangerous와 같은 장르
  * 우주선 조종, 3인 조종(역할 분담), 전투, 장애물 돌파, 보스
 - 차별점
  * 이제부터 고민해 봐야 한다.
    2D -> 3D (모델링만 3D로 한 짝퉁 3D인가?    Starcraft1과 Starcraft2의 차이
      => 3차원 공간을 이동하는 진정한 3D로 만들 계획이다.
    1인칭 시점으로 하겠다. (우주선 내 이동과 우주선 조종을 둘다 1인칭)

3. 중점 연구 과제
 - 모든 졸업 작품은 중점연구과제가 있어야 하며, 이것을 완수했는가를 가지고 합격/불합격을 결정한다. 단순히 게임이 돌아가는 것으로는 졸업작품으로 인정할 수 없다.
 - 중점 연구 과제는 다음 중 적어도 하나를 만족해야 한다.
  1. 기술적인 난제 : 대학생이 쉽게 해결하기는 어려운 기술적인 문제를 해결 (새로운 렌더링 기법(Postprocessing, 파괴, 렌즈플레어...), 동접 5000을 넘어가는 서버... )
  2. 독창적인 게임성 : 기존에 어디에도 볼수 없었던 새로운 게임플레이 창조
  3. 컨텐츠의 양과 질 : 게임 시나리오, 컷신, 퀘스트 시스템, 격투 게임의 타격감, 정교한 스킬시스템....
 - 분야당 한개 정도의 과제가 필요 => 1인당 과제 하나

4. 미션
 - 소행성지대 탐험
 - 우주에 소행성이 랜덤으로 깔려 있고, 우주선을 조종해서 소행성과 부딛치지 않고 이동하는 게임.
 - 소행성은 랜덤하게 회전하고 있다. 소행성은 단순한 구가 아니고 찌그러진 물체들 (https://starwars.fandom.com/ko/wiki/%ED%8F%B4%EB%A6%AC%EC%8A%A4_%EB%A7%88%EC%82%AC?file=Databank_polismassa_01_169_21f04b76.jpg)
  * 3DMAX에서 제작하는 것이 편할 것임.
 - Directional Light와 그것에 맞춘 shading 구현
 
5. 다음 미팅
 - 7월 11일 월요일 오후 3시
 - 미션 수행
 - 중점연구과제 아이템 고민해 오기
 - Git 프로젝트 만들어서 모든 프로그램과 Asset, 문서들을 저장하기.  지도교수 초대 : zzapuno@hotmail.com

2022-07-11
-------------
1. GIT Project 생성, 지도 교수 초대
 - 쓸데 없는 중간 파일들 GIT에서 빼기
 - blender 파일도 저장할 것
 - visual studio solution 파일에 사용하는 bin 파일도 저장할 것.

2. 진행상황
 - 우주선을 만들도 소행성이 지나가게 만들었다.

3. ToDo
 - 정지해 있는 소행성들을 우주선을 조종해서 피해 가기
  * 소행성은 200개 정도가 랜덤으로 뿌려져 있다.
  * 우주선은 멈춰있다. : W키를 누르면 앞으로 가속도를 받고, S키를 누르면 뒤로 가속도를 받는다., 방향 전환은 화살표키로 한다. (up화살표 키를 누르면 진행 방향이 위쪽으로 변한다.)
 - 게임속도(=우주선의 속도)를 그래픽카드의 속도에 맞추지 않고, 진짜 시간에 맞추도록 할것. (C++11의  std::chrono::system_clock을 사용)
 - 우주선의 X,Y,Z 좌표, X,Y,Z축에 대한 속도, X,Y,Z축에대한 가속도를 화면에 표시할 것 (독학을 해서 구현할 것)

4. 중점 연구 과제
 - 여러가지 기술적 문제들을 찾아보고 있는데, 잘 모르겠다 <= 계속 찾아 볼것.
  * 2학기 수업을 들으면서 그래픽 전공 교수님과 상담도 해보자.

5. 다음 미팅
 - 8월 1일 월요일 오후 3시 
 - 미션 계속 수행
 - 게임에 사용할 우주선의 껍데기만 Blender로 만들어 볼것

2022-08-01
-------------
1. 진행상황
 - 정지해 있는 소행성들을 우주선을 조종해서 피해 가기
  * 많은 소행성, 화면에 위치/이동 정보 출력. (가속도는 제대로 표현되지 않는다.)

2. 중점연구과제
 - 아직 고민 중
 
3. ToDo
 - 게임에 사용할 우주선을 만들어서 넣자.
  * 내부까지 구현 (외부 Asset 사용 가능(
  * 내부 카메라 모드와 외부 카메라 모드 전환. 구현
 - 미사일을 발사해서 운석을 파괴.
 - 중점연구과제 고민

4. 다음 미팅
 - 8월 22일 월요일 오후 7시

2022-08-22
-------------
1. 진행상황
 - 우주선 제작, 우주선 내부 제작
 - 미사일 발사와 운석 파괴

2. 중점연구과제 
 - 계속 고민 중

3. ToDo
 - 프레임워크 수정, 미사일 방향 버그 수정
 - 우주선 조종 및 타게팅 UI 개선 필요 (맞추고 싶은 것을 쉽게 맞출 수 있도록)
 - 중점연구과제 고민 할 것

4. 다음미팅
 - 9월 8일 목요일 저녁 7시

2022-09-08
------------
1. 진행상황
 - UI에서 사망
 - 덩치큰 돌덩이가 총알을 통과시킴

2. 중점연구과제
 - 진전이 없음....
 - 수업을 열심히 듣고 있음
   * 넷겜플은 소켓 프로그래밍을 시작 했음.

3. 기획
 - 전체 게임 지도 (크기 필요,    ?km X ?km X ?km)
  * 시작 점,   최종 보스가 있는 곳,  최종보스로 가는 길,  도중에 만날 수 있는 각종 장애물들.

 - 부하들 [10 종류]
  * 생김새
  * 이동 방식 
    - 고정/정해진 두점 사이를 왔다 갔다/정해진 영역에서 랜덤하게 돌아다니기
    - 플레이어 인식 거리
  * 공격 방식
    - 플레이어를 인식했을 떄 어떻게 공격할 것인가?
    - 원거리공겨, 다가와서 박치기,
    - 미사일/빔/드론/박치기
    - 무기의 모양과 속도 데미지, 한번에 몇개나 발사, 사격 간격, 
  * HP
    - 실드 : 시간이 지나면 조금씩 회복
    - 외벽
  * 특징
    - ?????
  * 전체 게임 지도에서의 위치

 - 플레이어 우주선
  * 무기
  * HP
  * 속도 (m/s)

 - 우주선 조종 UI
  * 회전, 상승/하강, 전진/후진    어떻게 조작하는가 (마우스/키보드)
  * 카메라 조작                    마우스/키보드?
  
 - 공격 UI

 - 실내 모드에서 UI
  * 자리바꾸기
 
- 상점 UI
 * 판매/구입 UI

4. 다음 미팅
 - 9월 22일 목요일 오후 7시
 - 버그 수정
 - 기획내용 문서화

2022-09-22
-------------
1. 기획문서
 - 적, 지도, 우주선 내부 플레이

2. 중점연구과제
 - 아직 마땅한 것이 없음

3. 프로그램 업데이트 필요

4. 다음 미팅
 - 프로그램 죽는 거 수정
 - FPS에 반비례하는 우주선 속도 수정
 - 미사일을 쏴서 소행성을 제거 할 수 있도록 수정
 - 서버와 클라이언트를 만들엇 2개의 클라이언트로 서버 접속
   * 한 클라이언트는 우주선 조종을 담당하고
   * 다른 한 클라이언트는 미사일 발사를 담당한다.
 - 10월 4일 화요일 오후 7시 30분

2022-10-04
-------------
1. 진행상황
 - 서버연동 : 키누른 것을 옆의 클라이언트에 전달하는 방식
 - 프로그램 안정성 향상
 - 미사일이 소행성을 맞춤

2. 중점연구과제
 - 카툰렌더링 : 쉬운방법이 있고 어려운 방법이 있다. Quality차이가 있고, 어떤 방법을 쓸지 결정을 해야한다. 심사위원의 눈높이를 맞춰야 하는데 이용희 교수님이나 이택희 교수님과 상담 필요.
 - 

3. 다음 미팅
 - 서버연동 개선 :
     * 서버에서 우주선의 좌표를 수정하도록 변경할 것 : 클라이언트에서 키 입력을 보고 우주선 좌표를 변경하는 코드를 서버로 옮길 것
     * 미사일 발사 로직도 서버로 옮길 것 : 서버에서 클라이언트에게 미사일 발사 위치와 방향을 알려 주면, 클라이언트에서 그 방향으로 미사일을 발사 시키도록 한다.
     * 한클라이언트는 우주선 이동만 담당, 다른 클라이언트 미사일 발사만 담당 : 'X' 키를 누르면 역활 교환
 - 클라이언트 UI 개선
     * 1인칭 시점으로 변경
     * 오른클릭을 한 상태로 마우스를 이동하면 카메라가 바라보는 방향이 바뀜 
           - 조종사 : (우주선이 바라보는 방향도 바뀜) => 이동방향도 바라보는 방향으로 이동을 한다.
           - 포수 :  (포탑 바라보는 방향도 바뀜) => 미사일이 바라보는 방향으로 발사된다.
     * 왼클릭으로 미사일 발사
 - 10월 18일 화요일 오후 7시 30분

2022-11-03
-------------
1. 중점연구과제
 - 이제 정해야 할 때가 되었다.

2. 진행상황
 - 서버 연동 : 이동클라이언트와 공격클라이언트 연동
  * 이동과 공격, 타입전환이 잘 동기화 됨

3. ToDO
 - 12월 말 발표까지 중점연구과제 정하기
  * 카툰렌더링? <- 어떻게 하겠다고 이야기를 해야 한다. 여러가지 카툰렌더링 기법이 있는데, 어떤것을 구현할 지.
  * 서버 쪽으로????  다른언어로 구현 (Go, Elixir, RUST... ), 동접 5000, NPC에 AI를 넣겠다. 서버를 RIO로 구현, IO-uring으로 구현하겠다.
 - 적 우주선 하나 만들어서 넣기 
  * 플레이어를 쫒아 다니면서 돌멩이 발사
  * 우리가 막대기를 던져서 폭파 시키면 2초있다가 부활해서 다시 공격
  * 서버에서 조종
 - GIT에 올린것 버그 없애기
 - 기획문서 하나로 통합해서 정리

4. 다음미팅
 - 11월 17일 목요일 7시 30분
 - 

2022-11-17
------------
1. ToDO
 - 12월 말 발표까지 중점연구과제 정하기
  * 카툰렌더링? <- 어떻게 하겠다고 이야기를 해야 한다. 여러가지 카툰렌더링 기법이 있는데, 어떤것을 구현할 지.
  * 서버 쪽으로????  다른언어로 구현 (Go, Elixir, RUST... ), 동접 5000, NPC에 AI를 넣겠다. 서버를 RIO로 구현, IO-uring으로 구현하겠다.
 - 적 우주선 하나 만들어서 넣기 
  * 플레이어를 쫒아 다니면서 돌멩이 발사
  * 우리가 막대기를 던져서 폭파 시키면 2초있다가 부활해서 다시 공격
  * 서버에서 조종
 - GIT에 올린것 버그 없애기
 - 기획문서 하나로 통합해서 정리

2. 다음미팅
 - 12월 1일 목요일 7시 30분

2022-12-01
--------------
1. 중점연구과제
 - 갓레이 : 중점연구과제로 할만큼 가치가 있는 것인가???? 모르겠당.   이용희교수님이나 이택희교수님에게 여쭤볼 것.
 - LUA 스크립트로 보스 컨트롤 하기 => 복잡한 스크립트로 구현, 
 - 부위파괴효과 => (기획자료\파괴구현.png) => 단순히 텍스쳐 바꿔치기는 너무 쉬워서 졸작의 가치가 없음.

2. 진행상황
 - 적 우주선 하나 넣기

3. 발표 PPT
 - 중점연구과제 보충 설명 필요 : 현재는 그냥 단어의 나열.

4. ToDo
 - 서버 연동 버그 수정 (현재 클라이언트가 빙글빙글돈다.)
 - 적 우주선 하나 만들어서 넣기 
  * 플레이어를 쫒아 다니면서 돌멩이 발사
  * 우리가 막대기를 던져서 폭파 시키면 2초있다가 부활해서 다시 공격
  * 서버에서 조종
 - 기획서 작성
  * 기존 기획서에서 변경된 내용 수정
  * 적들 설정
  * 중점연구 과제
 - 갓레이 상담 (중점연구과로 삼을만 한가?)

5. 다음미팅
 - 12월 15일 목요일 오후 7시 30분


2022-12-15
------------
1. 발표 PPT
 - 지도가 엉터리이다 블랙홀은 길옆에 있는 단순 경치로 보인다.
 - 중점연구과제의 대대적인 변경이 있었음
  * GOD rays : 송인희교수님의 화인
  * 동접 3000
  * LUA를 사용한 6가지 보스 패턴.

2. 진행상황
 - 적우주선 구현 : 이동/공격/동기화/부활
 - UI가 너무 불편하다. 해보면 느끼겠지.

3. 기획서
 - 많은 부분이 미작성 되어 있다.

4. 다음 미팅 12월 30일
  - 금요일 : 스타벅스 사당점 (사당역 5번출구) 오전 11시
  - 12월 19일 발표PPT제출 예정  2시 30분 검토

5. ToDo
 - 발표 PPT 수정, 기획서 완성

2023-01-13
------------
1. 기획발표
 - 지적사항
  * 소재 : 우주에 뜬금없는 용
  * 맵 : 방대한 공간과 무한한 이동자유가 핵심인 우주에 왠 좁은 통로??  우주를 배경으로 삼은 이유가 무었인가?????

2. 진행상황
 - 없음

3. ToDo
 - 방학동안에 중점연구과제가 들어가 있는 스테이지 1 구현
 - LUA 연동
   * 게임서버프로그래밍에서 LUA연동을 배움
   * LUA로 조종되는 보스는 서버에서 조종하는 것이고, 클라이언트는 서버에서 시키는 대로 보스를 이동시키고, 하라는 애니메이션을 플레이하고, 던져 주는 대사를 읊는다.
   * LUA 스크립트
    - FSM (Finite State Machine) 유한상태 기계로 구현하여야 한다.
    - enum STATE {STATE_IDLE, STATE_SLEEPING, STATE_ MOVING, STATE_CHASING, STATE_FIGHTING, STATE_POLYMORPH };
    - enum CURRENT_ANIMATION { ANIM_IDLE, ANIM_SLEEPING< ANIM_MOVE, ANIM_PYUNGTA, ANIM_FIREBALL, ANIM_SPELL_CASTING };
    - struct LOCATION { float x, float y, float z}
    - class BOSS_AI {
         LOCATION location;
         LOCATION target_location;
         enum STATE next_job;
         int chase_target;
         float velocity;
         int    HP;
         int    MAXHP;
         std::chrono::system_clock::timepoint last_move_time;
         enum  STATE  curr_state;
         enum  CURRENT_ANIMATION  curr_ani;
         public:
             void do_ai(std::chrono::system_clock::time_point current_time)
             {
                 switch STATE:
                       case STATE_IDLE : if (curr_ani != ANIM_IDLE) send_animation(ANIM_IDLE); break;
                       case STATE_SLEEPING :  
                              if (curr_anum != ANIM_SLEEPING) send animation(ANIM_SLEEP);
                              break;
                       case STATE_MOVING :
                              if (location == target_location) if (next_job == STATE_MOVING) target_location = get_random_location();
                                                                               else { curr_state == next_job; break; }
                              LOCATION dir = target_location - location;
                              normalize_vector(&dir);
                              auto curr_time = std::chrono::system_clock::now();
                              float duration = last_move_time - curr_time;
                              dir = dir * velocity * duration;
                              curr_location += dir;
                              send_move(curr_location);
                              if (curr_num != ANIM_MOVING) { curr_anum = ANIM_MOVING; send_animation(ANIM_MOVING);
                              last_move_time = curr_time;
                              break;
                     case STATE_FIGHTING:
                              // 목표가 가까이 있는가? 있으면 브레스의 쿨타임이 되었는가? 되었으면 브레스 뿜기, 안되있으면 평타 쿨타임이 되었는가? 되었으면 평타, 아니면 아무것도 안함
                              // 목표가 멀면 상태를 STATE_CHASING 으로 하고, chase_target을 목표로 한다.
             } 
           void event_hit_by_player(int player_id)
            {
                if (curr_state == STATE_FIGHTING) return;
                curr_state = STATE_FIGHTING;
                fightint_target = player_id;
            }
            void event_player_move(int player_id, LOCATION &loc)
            {
               if (curr_state != STATE_IDLE) return;
               if (curr_location - loc < SIGHT_RANGE) {  curr_state = STATE_FIGHTING; fighting_target = player_id)
                }
            }
    * 위에서 : send_animation, send_move 같은 클라이언트에 보내는 API는 서버프로그래머가 만들어 주어야 한다.
    * do_ai, event_hit_by_player, event_player_move 같은 함수는 서버프로그램이 호출해 주어야 한다.

 - 3000동접
   * 게임서버프로그래밍 수업을 들으면 됨
   * IOCP와 멀티쓰레드프로그래밍 사용 필요. 하지만 MMORPG가 아니고 MO게임이기 때문에 멀티쓰레드 의존성은 떨어짐.
   * 동접 테스트가 필요 (3000명을 동시에 접속시켜서 게임을 플레이하는 스트레스 테스트 프로그램의 제작 필요) <= 게임서버프로그래밍 과목에서 배움
 - GOD RAYS
   * 다른 말로 Light Shift
   * 구현방법이 두가지
    - 조명을 뭉개기  => 단순히 광원 텍스쳐를 크게 만든 것, 너무 쉬워 보임 => 포트폴리오의 수준이 크게 떨어질 위험성이 있음
    - 그림자 만들때 끼워넣기. => 그래도 뭔가 한것 같고, 포트폴리오에서 DX12에 대한 이해가 높다는 것을 어필할 수 있을 것 같음.
    - 알고리즘 정리해 오기 ( Resource들과 필요한 렌더링 파라미터, 각 쉐이딩 단계별 입력 출력)
 - 컨텐츠 구현
  * 서버프로그래머와 스크립트 담당은 컨텐츠 구현을 먼저 하자 (수업을 들어야 구현할 수 있기 때문)
  * 실내모드 구현
    - 실외모드 버튼을 누르면 그래픽이 실외 모드로 전환, 실내모드 버튼을 누르면 다시 실내모드로
    - 실외모드 : 지금까지 구현한 것, 
          야옹호 : 우주선 10X10X10미터 구형
          운석 : 야옹호와 비슷한 크기(랜덤하게 변함),  랜덤한 간격으로 출현해서, 랜덤한 위치에서 랜덤한 방향으로 랜덤한 속도로 이동
          적 우주선 : 야옹호와 비슷한크기
               - 36마리가 존재, 10초마다 9마리씩 출현 : 야옹호 앞에 랜덤한 위치에 출현
               - 야옹호를 공격
                 - TYPE_A : 미사일 발사, 발사 간격, 잔탄 수 (무한 탄창??), 미사일 속도, 미사일 회전 반경 (야옹호를 추적하기 위한), 미사일 연료 (추적 가능 시간)
                            미사일이 다 떨어지면? 미사일 데미지, 근접 신관 유무?
                - TYPE_B : 레이저 발사 : 발사 간격, 데미지, 조준 실력 (1000발중에 몇발을 명중시킬 것인가?), 명중 보정 (야옹호가 가속이나 방향전환을 했을때 명중률이 얼마나 떨어지는가?)
                - TYPE_C : 플라이마 캐논 발사 : 발사간격이 레이저보다 길고, 위력이 강하다.
     - 실내모드 : 
            - 원룸에 책상이 4개 있고, 하나는 이동 책상, 나머지는 공격 책상
            - 고양이 외계인을 조종해서 원하는 책상에 앉는다.
            

4. 다음미팅
 - 2월 6일 월요일 오후 3시 학교
 - GODRAY 알고리즘 작성 => (2월 6일 부터는 구현에 들어갈 예정)
 - 실내모드 구현
   * 우주선 모델에 고양이들을 넣어서 이동시키는 것 까지 구현. 의자에 앉는 것 도
   * 3개의 클라이언트로 게임을 시작하면 화면에 고양이 3마리가 나와서 이동하고 의자에 앉고 한다.
 - 실외 모드 구현 (위에 적힌대로 구현)
   * 운석들 구현 (서버 동기화)
   * SKY_BOX 넣고
   * 적우주선 출현 및 이동 (전투는 다음에 구현)
 - 작업일지를 매주 (또는 2주마다) 작성
   * 내가 할일, 한일을 멤버 마다 적을 것
   * 졸작을 정말 우리가 했다. 나중에 포트폴리오에도 포함.
   * 샘플 참조

2023-02-06
-------------
1. 진행상황
 - God Ray 알고리즘 작성
  * 정리 해옴.
 - 실내모드 구현
  * 3마리 강아지가 우주선 안을 돌아다임
  * 문제 : 방향이 동기화가 되지 않는다. 화살표키와 이동방향이 맞지 않는다. (WASD로 이동해야 한다.)
 - 실외모드
  * 운석과 적우주선 구현
  * 동기화가 되고 있는지는 확인할 수 없음.

2. 다음 미팅
 - 2월 20일 월요일 오후 3시
 - GodRay : 
  * 광원을 하나 만들 예정
  * 빛의 조각을 30개 그려 오기
 - 실내 모드
  * 문제 해결
  * 의자에 제대로 앉도록 하자.
 - 실외 모드
  * 조종사 말고, 공격자도 구현 (마우스로 발사 방향 변경, 클릭으로 총알 발사)
  * 총알에 NPC 격추
  * NPC도 총알을 쏜다. 맞으면 HP감소, HP가 0이 되면 게임 종료.

2023-02-20
------------
1. 진행상황
 - GodRay
  * 진행중. 현재 범위 계산만 했음.
 - 실내모드
  * 의자에 파묻힘.
 - 실외모드
 * 조종 가능
 * 공격자는 공격 가능 (총알이 까매서 안보임)
- 비주얼
 * 스카이박스 추가

2. ToDo
 - GodRay
 - UI추가 : 미니맵, HP, 크로스헤어, 적 HP Bar, 플레이어 위에 이름, 의자에 다가가면 'F'키 안내, 소지 보석
 - 총알을 눈에 잘 띄게 표현
 - 보스 추가 (LUA가 아니고 직접 C++로 구현)
 - 3가지 Type의 NPC 구현
      - TYPE_A : 미사일 발사, 발사 간격, 잔탄 수 (무한 탄창??), 미사일 속도, 미사일 회전 반경 (야옹호를 추적하기 위한), 미사일 연료 (추적 가능 시간)
                            미사일이 다 떨어지면? 미사일 데미지, 근접 신관 유무?
      - TYPE_B : 레이저 발사 : 발사 간격, 데미지, 조준 실력 (1000발중에 몇발을 명중시킬 것인가?), 명중 보정 (야옹호가 가속이나 방향전환을 했을때 명중률이 얼마나 떨어지는가?)
      - TYPE_C : 플라이마 캐논 발사 : 발사간격이 레이저보다 길고, 위력이 강하다.
 - NPC 격추시 보석 추가.

3. 다음 미팅
 - 2023년 3월 7일 화요일 오전 10시 
 - 작업일지 작성

2023-03-07
-----------
1. 진행상황
 - GodRay
  * 빌보드들을 위치시키기는 함. 빛은 구현되어 있지 않음
 - UI추가 : 크로스헤어. 
  * 여기를 참조해서 UI를 구현 할 것. https://github.com/microsoft/DirectXTK12/wiki/Sprites-and-textures
 - NPC추가
  * 행동들이 잘 눈에 띄지 않는다.

2. TODo
 - GodRay
 - UI추가 : 미니맵, HP, 적 HP Bar, 플레이어 위에 이름, 의자에 다가가면 'F'키 안내, 소지 보석
 - 총알을 눈에 잘 띄게 표현
   * 밝은 색으로 해서 눈에 잘 띄게 하자.
 - 보스 추가 (LUA가 아니고 직접 C++로 구현)
 - 3가지 Type의 NPC 구현
      - TYPE_A : 자폭공격 으로 대체 [미사일 발사, 발사 간격, 잔탄 수 (무한 탄창??), 미사일 속도, 미사일 회전 반경 (야옹호를 추적하기 위한), 미사일 연료 (추적 가능 시간)
                            미사일이 다 떨어지면? 미사일 데미지, 근접 신관 유무?]
      - TYPE_B : 레이저 발사 : 발사 간격, 데미지, 조준 실력 (1000발중에 몇발을 명중시킬 것인가?), 명중 보정 (야옹호가 가속이나 방향전환을 했을때 명중률이 얼마나 떨어지는가?)
      - TYPE_C : 플라이마 캐논 발사 : 발사간격이 레이저보다 길고, 위력이 강하다.
 - NPC 격추시 보석 추가.

3. 다음미팅
 - 2023년 3월 21일 화요일 오전 10시
 - ToDo 수행
 - 게임이 너무 산만하다. 재미를 느낄 수 있게 컨텐츠의 배치와 조작감을 개선할 것.

2023-03-21
-----------
1. 진행상황
 - God Ray
  * 빌보드가 광원과 카메라에 맞춰서 정렬됨
   * 아직 Ray스러운 텍스쳐가 아님, 장애물에 끊기는 것 구현필요
 - UI 추가 : 미니맵, HP, 적 HP Bar, 플레이어 위에 이름, 의자에 다가가면 'F'키 안내
 - 총알 개선 됨
   * 추가 개선 필요, 좀더 밝게 (물체가 아니고 빔이라는 느낌이 들게, 맞으면 다칠것 같다는 느낌이 들게), 타게팅 UI에 총알이 가린다. (타케팅 UI의 선을 가늘게 하거나, 반투명으로)
 - NPC 개선 : 더이상 난잡하게 움직이지 않음.
  * 그렇다고 아무것도 안하고 멍하니 있는 것도 좀 어색하다.
 - 보스 추가 : 드래곤, 나름 이동도 하고 애니매이션도한다.
  * 너무 작아서 위압감이 없지 않는가?
 - 조작감 개선 : 우주선 조종이나, 공격 UI가 이전보다 직관적임.

2. 개선 필요
 - 버그
 * 의자에 앉았을 떄 화면이 파란색으로 먹통
 * 나중에 입장한 클라이언트가 앉아 있는 플레이어를 볼 수 없다.

3. ToDo
 - GodRay 완성
 - 레벨디자인 개선
  * 우주선의 이동경로
  * 스테이지 미션 부여 및 완료 시나리오
  * 이동방향 힌트 : 미니맵이던가 아니면 화살표 또는 이동선 
 - 버그 수정
 - 비주얼 개선 (우주선이 너무 칙칙, 꽁무니에 불꽃), NPC시 파괴시 파티클 효과

4. 다음 미팅
 - 4월 4일 화요일 오전 10시